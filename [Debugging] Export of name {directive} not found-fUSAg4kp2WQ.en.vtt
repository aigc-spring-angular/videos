WEBVTT
Kind: subtitles
Language: en

00:00:00.570 --> 00:00:02.880
SPEAKER: "Export of name
directive not found."

00:00:02.880 --> 00:00:04.350
You may encounter
this error when

00:00:04.350 --> 00:00:06.810
you reference a directive
in a template that has not

00:00:06.810 --> 00:00:09.090
been defined, not
properly imported,

00:00:09.090 --> 00:00:11.880
or when its export name
has not been declared.

00:00:11.880 --> 00:00:14.760
Let's take a look at a simple
reproduction and solution.

00:00:14.760 --> 00:00:17.220
Then we'll take a
closer look at NgModules

00:00:17.220 --> 00:00:19.590
to gain a deeper
understanding of this issue.

00:00:19.590 --> 00:00:21.750
We can start debugging
by finding the error

00:00:21.750 --> 00:00:24.540
in the browser console or in
the terminal from the Angular

00:00:24.540 --> 00:00:25.650
compiler output.

00:00:25.650 --> 00:00:28.770
In either case, it will take you
to the template that references

00:00:28.770 --> 00:00:30.060
the non-existent directive.

00:00:30.060 --> 00:00:33.270
And notice how the IDE is
catching this error in advance.

00:00:33.270 --> 00:00:36.750
Once there, rule out a simple
typo as the cause of the error.

00:00:36.750 --> 00:00:39.300
A more likely cause
is that the NgModule

00:00:39.300 --> 00:00:42.390
that exports that directive
has not been imported yet.

00:00:42.390 --> 00:00:44.010
In this example,
we're referencing

00:00:44.010 --> 00:00:47.670
ngForm, which is exported
by Angular's FormsModule.

00:00:47.670 --> 00:00:49.620
Therefore, we can
address the problem

00:00:49.620 --> 00:00:53.160
by going into the app module
and adding the FormsModule

00:00:53.160 --> 00:00:54.600
to the imports array.

00:00:54.600 --> 00:00:57.900
Save the file, then notice how
the warning and the component

00:00:57.900 --> 00:00:59.460
template has disappeared.

00:00:59.460 --> 00:01:01.200
That's because
Angular has no way

00:01:01.200 --> 00:01:03.060
to know about that
directive until it's

00:01:03.060 --> 00:01:05.040
been imported in the NgModule.

00:01:05.040 --> 00:01:08.010
If nothing changes, first
try restarting your local dev

00:01:08.010 --> 00:01:08.520
server.

00:01:08.520 --> 00:01:10.770
If the issue remains,
double check that you're

00:01:10.770 --> 00:01:12.720
importing the proper NgModule.

00:01:12.720 --> 00:01:15.090
For example, we can
search the directive name

00:01:15.090 --> 00:01:17.070
in the official
Angular documentation.

00:01:17.070 --> 00:01:18.990
The documentation
for that directive

00:01:18.990 --> 00:01:21.900
will tell us exactly
which NgModule to import.

00:01:21.900 --> 00:01:25.020
Now, it's also worth noting
that you may run into this error

00:01:25.020 --> 00:01:27.840
when you attempt to assign one
of your own custom directives

00:01:27.840 --> 00:01:29.380
to a template variable.

00:01:29.380 --> 00:01:32.610
Let's take a look at a component
and directive that both live

00:01:32.610 --> 00:01:34.350
within the same NgModule.

00:01:34.350 --> 00:01:37.210
The directive has a
selector of appForm.

00:01:37.210 --> 00:01:39.630
However, if we attempt
to assign that directive

00:01:39.630 --> 00:01:42.270
to a template variable,
it gives us a warning

00:01:42.270 --> 00:01:46.230
that there is no directive with
"exportAs" set to "appForm."

00:01:46.230 --> 00:01:49.410
In order to use a directive
as a template variable,

00:01:49.410 --> 00:01:52.500
we need to define a name
in the exportAs option

00:01:52.500 --> 00:01:53.910
in the directive decorator.

00:01:53.910 --> 00:01:56.220
And once the export
name has been defined,

00:01:56.220 --> 00:01:57.510
the error goes away.

00:01:57.510 --> 00:01:59.160
The key takeaway
here is that when

00:01:59.160 --> 00:02:01.470
using a directive as
a template variable,

00:02:01.470 --> 00:02:04.590
it must have an export name
within the directive decorator.

00:02:04.590 --> 00:02:06.670
Now that we know how
to debug this error,

00:02:06.670 --> 00:02:09.960
let's take a closer look
at NgModules and directives

00:02:09.960 --> 00:02:12.390
to understand why it
happens in the first place.

00:02:12.390 --> 00:02:14.640
When you create an
NgModule in Angular,

00:02:14.640 --> 00:02:16.740
you declare components
and directives

00:02:16.740 --> 00:02:19.480
that are to be used
privately within this module.

00:02:19.480 --> 00:02:22.110
But in many cases, you have
components and directives

00:02:22.110 --> 00:02:25.300
defined here that should be
used outside of this module.

00:02:25.300 --> 00:02:26.910
You can make these
classes public

00:02:26.910 --> 00:02:29.130
by adding them to
the exports array.

00:02:29.130 --> 00:02:31.230
And that's how you share
components and directives

00:02:31.230 --> 00:02:32.670
between NgModules.

00:02:32.670 --> 00:02:35.220
But keep in mind that when
working with directives,

00:02:35.220 --> 00:02:37.050
you also need to
consider how they'll

00:02:37.050 --> 00:02:38.610
be consumed in the template.

00:02:38.610 --> 00:02:40.830
For example, here
we have a directive

00:02:40.830 --> 00:02:42.960
with a class name of NgForm.

00:02:42.960 --> 00:02:45.810
If the goal is to use the
directive as a property

00:02:45.810 --> 00:02:49.080
or attribute on an element,
we define a selector

00:02:49.080 --> 00:02:52.710
as in a CSS selector, like
a class name or attribute.

00:02:52.710 --> 00:02:55.230
Then the directive is
instantiated when that selector

00:02:55.230 --> 00:02:56.890
is encountered in the template.

00:02:56.890 --> 00:02:59.370
However, if the goal
is to use the directive

00:02:59.370 --> 00:03:02.830
as a template variable, that
same mechanism doesn't work.

00:03:02.830 --> 00:03:05.280
Therefore, we set
an export as name

00:03:05.280 --> 00:03:07.200
to make that name
known to Angular,

00:03:07.200 --> 00:03:09.150
allowing it to
instantiate the directive

00:03:09.150 --> 00:03:10.930
in a template variable.

00:03:10.930 --> 00:03:12.130
Let's go ahead and recap.

00:03:12.130 --> 00:03:14.310
When you encounter
the "Export of name

00:03:14.310 --> 00:03:16.650
directive not found"
error, debug it

00:03:16.650 --> 00:03:19.260
by finding the template that
references the directive.

00:03:19.260 --> 00:03:22.260
Then determine which NgModule
needs to be imported.

00:03:22.260 --> 00:03:24.120
Once the module has
been identified,

00:03:24.120 --> 00:03:27.060
it can be imported in
your own local NgModule.

00:03:27.060 --> 00:03:30.450
If the issue is not related
to an NgModule import,

00:03:30.450 --> 00:03:34.290
verify that the directive
has an exportAs property set

00:03:34.290 --> 00:03:37.050
when used in the context
of a template variable.

00:03:37.050 --> 00:03:38.730
For additional
examples and details,

00:03:38.730 --> 00:03:41.390
reference the official
Angular documentation.

