WEBVTT
Kind: subtitles
Language: en

00:00:00.740 --> 00:00:02.990
SPEAKER: The pipe name
could not be found.

00:00:02.990 --> 00:00:04.490
You may encounter
this error when

00:00:04.490 --> 00:00:06.650
you reference a pipe
in a template that

00:00:06.650 --> 00:00:10.070
has either not been imported
or not been named properly.

00:00:10.070 --> 00:00:11.750
Just like components
and directives,

00:00:11.750 --> 00:00:15.360
pipes must be declared or
imported in an NgModule.

00:00:15.360 --> 00:00:17.600
In addition, when
referenced in a template,

00:00:17.600 --> 00:00:20.180
the name must match
the name specified

00:00:20.180 --> 00:00:21.440
in the pipe decorator.

00:00:21.440 --> 00:00:23.240
Angular uses the
name in a template

00:00:23.240 --> 00:00:25.310
to determine which
pipe to execute.

00:00:25.310 --> 00:00:27.420
That means every pipe
must have a name.

00:00:27.420 --> 00:00:30.090
And the name must be
unique to that NgModule.

00:00:30.090 --> 00:00:32.600
Let's start by taking a look
at a simple reproduction

00:00:32.600 --> 00:00:33.590
and solution.

00:00:33.590 --> 00:00:35.510
Then we'll review
pipes in greater detail

00:00:35.510 --> 00:00:37.700
to understand why
this error occurs.

00:00:37.700 --> 00:00:40.730
In our code base, you'll
notice we're referencing a pipe

00:00:40.730 --> 00:00:42.140
with the name of truncate.

00:00:42.140 --> 00:00:46.070
However, the red underline in VS
Code is telling us that Angular

00:00:46.070 --> 00:00:47.990
cannot find a pipe
with that name.

00:00:47.990 --> 00:00:49.820
If you don't see the
error in VS Code,

00:00:49.820 --> 00:00:51.770
you might also find
it in the terminal

00:00:51.770 --> 00:00:53.300
or in the browser console.

00:00:53.300 --> 00:00:55.550
In either case, the stack
trace will direct you

00:00:55.550 --> 00:00:58.250
to the template file that
is causing the issue.

00:00:58.250 --> 00:01:00.230
In order to fix the
issue, we'll first

00:01:00.230 --> 00:01:02.510
want to verify that
the pipe is available

00:01:02.510 --> 00:01:04.400
in the appropriate NgModule.

00:01:04.400 --> 00:01:06.140
In this case, we're
attempting to use

00:01:06.140 --> 00:01:07.400
the pipe in the app module.

00:01:07.400 --> 00:01:09.560
And because it's a
custom pipe that we're

00:01:09.560 --> 00:01:11.450
developing in this
project, it needs

00:01:11.450 --> 00:01:14.040
to be in the declarations
for this module,

00:01:14.040 --> 00:01:16.010
just like a component
or directive.

00:01:16.010 --> 00:01:17.840
Now, in other
cases, the pipe may

00:01:17.840 --> 00:01:19.970
be exported by a
different module

00:01:19.970 --> 00:01:23.070
or exported from a third
party package, in which case

00:01:23.070 --> 00:01:25.400
you may need to import
that module as opposed

00:01:25.400 --> 00:01:27.350
to adding the pipe
to the declarations.

00:01:27.350 --> 00:01:29.600
At this point, we have
verified that the pipe is

00:01:29.600 --> 00:01:32.750
available in the NgModule, but
we're still getting the error.

00:01:32.750 --> 00:01:35.780
The next piece of code to check
is the pipe definition itself

00:01:35.780 --> 00:01:38.930
and specifically, the name
option in the pipe decorator.

00:01:38.930 --> 00:01:41.330
Notice here how the
pipe name is shortened.

00:01:41.330 --> 00:01:43.970
But in the template, it's
referenced as truncate.

00:01:43.970 --> 00:01:45.890
The issue can be
resolved by fixing

00:01:45.890 --> 00:01:48.560
the mismatch-- either change the
name referenced in the template

00:01:48.560 --> 00:01:51.630
or change the name parameter
in the pipe decorator.

00:01:51.630 --> 00:01:52.670
That'll fix the issue.

00:01:52.670 --> 00:01:54.320
And it brings up
a good opportunity

00:01:54.320 --> 00:01:55.847
to point out a
best practice that

00:01:55.847 --> 00:01:57.680
will prevent issues
like this from happening

00:01:57.680 --> 00:01:58.580
in the first place.

00:01:58.580 --> 00:02:00.110
When you create a
pipe in Angular,

00:02:00.110 --> 00:02:03.320
it's conventional for the pipe
name to match the file name

00:02:03.320 --> 00:02:04.340
where it's defined.

00:02:04.340 --> 00:02:07.010
Notice how the pipe name is
truncate and the file name

00:02:07.010 --> 00:02:09.320
is truncate.pipe.ts.

00:02:09.320 --> 00:02:12.050
When using the Angular
CLI, this best practice

00:02:12.050 --> 00:02:13.800
will be applied automatically.

00:02:13.800 --> 00:02:15.680
Now that we know how
to resolve this issue,

00:02:15.680 --> 00:02:17.600
let's do a quick
review of how pipes

00:02:17.600 --> 00:02:20.180
work in Angular to understand
why this issue happens

00:02:20.180 --> 00:02:21.140
in the first place.

00:02:21.140 --> 00:02:24.290
The role of a pipe in Angular
is to transform values

00:02:24.290 --> 00:02:24.980
in the template.

00:02:24.980 --> 00:02:28.730
And unlike regular method calls,
Angular can optimize pipes.

00:02:28.730 --> 00:02:31.010
They are especially useful
when you have an expression

00:02:31.010 --> 00:02:33.380
or value, like a
number, that needs

00:02:33.380 --> 00:02:37.130
to be reformatted as a currency,
decimal, or some other format.

00:02:37.130 --> 00:02:39.410
Angular has a handful
of built-in pipes,

00:02:39.410 --> 00:02:41.330
or you can create
your own from scratch.

00:02:41.330 --> 00:02:43.370
When Angular encounters
the pipe character

00:02:43.370 --> 00:02:45.590
in a template expression,
it uses the name

00:02:45.590 --> 00:02:48.290
of the pipe to determine
which class has the function

00:02:48.290 --> 00:02:49.100
to execute.

00:02:49.100 --> 00:02:51.290
If an invalid name
is provided, Angular

00:02:51.290 --> 00:02:53.910
has no way to find the
corresponding function.

00:02:53.910 --> 00:02:56.270
But when it is valid,
it will match that name

00:02:56.270 --> 00:02:58.340
to the pipe class,
which implements

00:02:58.340 --> 00:03:00.110
a pipe transform function.

00:03:00.110 --> 00:03:02.540
The transform function
takes the value provided

00:03:02.540 --> 00:03:05.300
from the template, along with
any additional arguments,

00:03:05.300 --> 00:03:07.730
then returns a new value,
which is ultimately

00:03:07.730 --> 00:03:09.360
shown to the end user.

00:03:09.360 --> 00:03:10.590
Let's go ahead and recap.

00:03:10.590 --> 00:03:13.130
When you encounter the
pipe name not found error,

00:03:13.130 --> 00:03:14.780
it means a pipe
has been referenced

00:03:14.780 --> 00:03:17.930
in a template that has either
not been imported or not been

00:03:17.930 --> 00:03:19.070
named properly.

00:03:19.070 --> 00:03:21.200
Resolve the issue
by first verifying

00:03:21.200 --> 00:03:23.630
that the pipe has been
imported or declared

00:03:23.630 --> 00:03:25.460
in the appropriate NgModule.

00:03:25.460 --> 00:03:27.740
If the issue remains,
check the pipe definition

00:03:27.740 --> 00:03:31.040
itself to verify that the
name matches the name declared

00:03:31.040 --> 00:03:32.090
in the template.

00:03:32.090 --> 00:03:33.800
For additional
examples and details,

00:03:33.800 --> 00:03:36.460
reference the official
Angular documentation.

