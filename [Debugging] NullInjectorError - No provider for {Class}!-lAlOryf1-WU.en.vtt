WEBVTT
Kind: subtitles
Language: en

00:00:00.650 --> 00:00:02.990
SPEAKER: "NullInjectorError,
No provider

00:00:02.990 --> 00:00:04.490
for the injectable class."

00:00:04.490 --> 00:00:05.990
You'll encounter
this error when you

00:00:05.990 --> 00:00:08.360
attempt to inject a
service without declaring

00:00:08.360 --> 00:00:09.900
the corresponding provider.

00:00:09.900 --> 00:00:13.010
In other words, your code is
attempting to use a dependency,

00:00:13.010 --> 00:00:15.650
but Angular has no
way to find or inject

00:00:15.650 --> 00:00:17.780
that dependency because
there is currently

00:00:17.780 --> 00:00:19.440
no provider pointing to it.

00:00:19.440 --> 00:00:21.680
But what is a provider, exactly?

00:00:21.680 --> 00:00:24.620
Think of it like a prescription
for a medication, where

00:00:24.620 --> 00:00:27.410
the prescription is a
provider and the medication

00:00:27.410 --> 00:00:28.940
is an injectable service.

00:00:28.940 --> 00:00:30.860
What the error is
telling us is that we're

00:00:30.860 --> 00:00:34.430
trying to use a medication
that has not been prescribed.

00:00:34.430 --> 00:00:36.830
There are two places we
can address the issue--

00:00:36.830 --> 00:00:39.080
the injectable decorator
or the provider's

00:00:39.080 --> 00:00:40.730
array in an NgModule.

00:00:40.730 --> 00:00:44.090
In either case, a provider is
composed of three main pieces

00:00:44.090 --> 00:00:45.030
of information.

00:00:45.030 --> 00:00:47.600
First, it needs to know where
to make the class available,

00:00:47.600 --> 00:00:50.450
like the root of the
application or a feature module.

00:00:50.450 --> 00:00:53.780
And second, it needs a token
for locating that class

00:00:53.780 --> 00:00:55.790
within the dependency
injection system.

00:00:55.790 --> 00:00:58.700
The token is the class type
that has been decorated.

00:00:58.700 --> 00:01:01.768
In most cases, the token
will be the same as the class

00:01:01.768 --> 00:01:02.810
that you want to provide.

00:01:02.810 --> 00:01:04.730
However, it's
possible to provide

00:01:04.730 --> 00:01:07.190
a third piece of
information, like useClass

00:01:07.190 --> 00:01:09.080
to provide an entirely
different class

00:01:09.080 --> 00:01:12.240
or useValue to
provide a raw value.

00:01:12.240 --> 00:01:15.050
Let's start by taking a look
at a couple of common examples

00:01:15.050 --> 00:01:16.220
and quick fixes.

00:01:16.220 --> 00:01:19.160
Then we'll take a more detailed
look at injectors and providers

00:01:19.160 --> 00:01:21.170
to understand why
this error happens

00:01:21.170 --> 00:01:22.580
at a more fundamental level.

00:01:22.580 --> 00:01:24.620
In our code base,
we have a service

00:01:24.620 --> 00:01:26.090
decorated with injectable.

00:01:26.090 --> 00:01:28.010
But currently, this
service has not

00:01:28.010 --> 00:01:31.310
been provided to any NgModule
within the application.

00:01:31.310 --> 00:01:33.950
When we attempt to inject it
in the constructor of the app

00:01:33.950 --> 00:01:36.860
component, the result is
the NullInjectorError.

00:01:36.860 --> 00:01:39.830
The error message itself
points to the offending class.

00:01:39.830 --> 00:01:42.530
Now, there are two main ways
we might address the issue.

00:01:42.530 --> 00:01:44.360
If we want to provide
the class throughout

00:01:44.360 --> 00:01:47.360
the entire application, we
can use the providedIn "root"

00:01:47.360 --> 00:01:48.050
option.

00:01:48.050 --> 00:01:49.940
That'll provide a
global singleton

00:01:49.940 --> 00:01:51.860
that can be used anywhere
in the application

00:01:51.860 --> 00:01:53.090
and clears the error.

00:01:53.090 --> 00:01:56.360
However, that may not always
be the optimal solution.

00:01:56.360 --> 00:01:59.030
In some cases, it may be
more efficient to scope

00:01:59.030 --> 00:02:00.830
a service to a feature module.

00:02:00.830 --> 00:02:03.530
And that can be achieved
by providing an NgModule

00:02:03.530 --> 00:02:05.690
class as the providedIn option.

00:02:05.690 --> 00:02:07.850
That makes it possible
to exclude this code

00:02:07.850 --> 00:02:09.860
from the app's main
JavaScript bundle

00:02:09.860 --> 00:02:13.040
and lazy load it when it becomes
needed to improve load time

00:02:13.040 --> 00:02:13.760
performance.

00:02:13.760 --> 00:02:15.740
That's ideal when you
have a service that's

00:02:15.740 --> 00:02:17.640
used by an individual module.

00:02:17.640 --> 00:02:19.310
But what if a
service is required

00:02:19.310 --> 00:02:21.320
by multiple lazy loaded modules?

00:02:21.320 --> 00:02:23.480
In that case, you
may want each module

00:02:23.480 --> 00:02:25.730
to create its own
instance of the service.

00:02:25.730 --> 00:02:28.850
That can be achieved with
the providedIn "any" option.

00:02:28.850 --> 00:02:31.070
Instead of a
singleton, this option

00:02:31.070 --> 00:02:33.830
will instantiate a new
service for each module

00:02:33.830 --> 00:02:34.830
that injects it.

00:02:34.830 --> 00:02:36.890
And one other option
to also be aware of

00:02:36.890 --> 00:02:40.100
is providedIn "platform," which
is relevant to projects that

00:02:40.100 --> 00:02:41.870
use multiple
Angular applications

00:02:41.870 --> 00:02:44.990
on a single page, such as
web components with Angular

00:02:44.990 --> 00:02:46.250
elements, for example.

00:02:46.250 --> 00:02:48.350
providedIn "platform"
will make the service

00:02:48.350 --> 00:02:51.230
available to all
applications on that page.

00:02:51.230 --> 00:02:54.290
In total, that's four different
ways to provide a service.

00:02:54.290 --> 00:02:57.620
"root" instantiates a singleton
for an entire Angular app.

00:02:57.620 --> 00:03:01.040
A module class provides a
singleton for just that module.

00:03:01.040 --> 00:03:04.100
"any" provides an instance for
each module that injects it.

00:03:04.100 --> 00:03:07.250
And "platform" provides a
singleton for multiple Angular

00:03:07.250 --> 00:03:08.360
applications.

00:03:08.360 --> 00:03:10.040
Now, it's also worth
noting that you

00:03:10.040 --> 00:03:13.700
can provide a service directly
in the NgModule decorator.

00:03:13.700 --> 00:03:15.860
Import the service you
want to provide, then

00:03:15.860 --> 00:03:19.340
add it to the provider's array
within the NgModule decorator.

00:03:19.340 --> 00:03:21.210
This pattern also
creates a provider.

00:03:21.210 --> 00:03:23.510
However, it's generally
not the preferred approach

00:03:23.510 --> 00:03:25.940
because it makes the code
more difficult to tree-shake

00:03:25.940 --> 00:03:28.280
when a service has not
been injected anywhere.

00:03:28.280 --> 00:03:31.550
Now, in many cases, you may
encounter the NullInjectorError

00:03:31.550 --> 00:03:33.470
from a third-party
dependency or one

00:03:33.470 --> 00:03:35.180
of Angular's built-in modules.

00:03:35.180 --> 00:03:39.170
For example, imagine we import
the HTTP client into our app

00:03:39.170 --> 00:03:42.350
component, then inject it as a
dependency in the constructor.

00:03:42.350 --> 00:03:44.120
That also throws
an error, but you

00:03:44.120 --> 00:03:46.610
might be wondering why
something built into Angular

00:03:46.610 --> 00:03:47.900
would not have a provider.

00:03:47.900 --> 00:03:50.240
There are only a handful
of minimal services

00:03:50.240 --> 00:03:51.530
built into Angular core.

00:03:51.530 --> 00:03:54.590
Almost everything else is
isolated in its own module.

00:03:54.590 --> 00:03:58.160
What that means is that in
order to use the HTTP client,

00:03:58.160 --> 00:04:01.250
we need to import its
corresponding NgModule

00:04:01.250 --> 00:04:03.590
in the module that depends
on it, which in our case

00:04:03.590 --> 00:04:04.700
is the app module.

00:04:04.700 --> 00:04:07.400
And we do that by adding
it to its imports array.

00:04:07.400 --> 00:04:09.170
Now that we know how
to fix the issue,

00:04:09.170 --> 00:04:10.610
let's talk about injectors.

00:04:10.610 --> 00:04:12.560
When Angular is
bootstrapped, it creates

00:04:12.560 --> 00:04:14.120
an application-wide injector.

00:04:14.120 --> 00:04:16.940
Its job is to create
and manage dependencies.

00:04:16.940 --> 00:04:20.450
And it does that by maintaining
a collection of providers.

00:04:20.450 --> 00:04:23.300
Each provider contains
a token, or class type,

00:04:23.300 --> 00:04:26.450
that tells Angular where to
find the injectable value.

00:04:26.450 --> 00:04:28.580
In most cases, a
provider is created

00:04:28.580 --> 00:04:30.200
with the injectable decorator.

00:04:30.200 --> 00:04:31.700
When that class
is then referenced

00:04:31.700 --> 00:04:34.160
in the constructor of a
component, for example,

00:04:34.160 --> 00:04:36.080
the injector will
use the provider

00:04:36.080 --> 00:04:38.330
to find the existing
instance of that class

00:04:38.330 --> 00:04:40.520
or instantiate a
new one if required.

00:04:40.520 --> 00:04:43.250
Every dependency needs to
have at least one provider,

00:04:43.250 --> 00:04:46.100
and that brings us to the
root of the NullInjectorError.

00:04:46.100 --> 00:04:48.450
If there's no provider,
it just doesn't work.

00:04:48.450 --> 00:04:49.680
Let's go ahead and recap.

00:04:49.680 --> 00:04:51.740
When you encounter
the NullInjectorError,

00:04:51.740 --> 00:04:55.130
it means a service was injected
without the necessary provider.

00:04:55.130 --> 00:04:57.680
The first step is to
find the offending class.

00:04:57.680 --> 00:04:59.810
If it's one of your
own injectable classes,

00:04:59.810 --> 00:05:02.040
you can provide it in the
root of the application

00:05:02.040 --> 00:05:03.990
or provide it in an NgModule.

00:05:03.990 --> 00:05:06.180
If it's related to a
third-party dependency,

00:05:06.180 --> 00:05:08.730
you're likely missing
an NgModule import.

00:05:08.730 --> 00:05:10.590
Determine where that
service is provided,

00:05:10.590 --> 00:05:13.140
then import the
corresponding NgModule.

00:05:13.140 --> 00:05:15.100
For additional
details and examples,

00:05:15.100 --> 00:05:16.800
check out the dependency
injection guide

00:05:16.800 --> 00:05:20.060
in the official
Angular documentation.

