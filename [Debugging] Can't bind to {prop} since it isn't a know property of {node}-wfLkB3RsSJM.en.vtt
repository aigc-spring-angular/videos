WEBVTT
Kind: subtitles
Language: en

00:00:00.000 --> 00:00:02.220
SPEAKER: "Can't bind a
[? prop ?] name because it

00:00:02.220 --> 00:00:04.230
isn't a known property
of [? node ?]."."

00:00:04.230 --> 00:00:05.670
You may encounter
this error when

00:00:05.670 --> 00:00:07.470
you attempt to
bind to a property

00:00:07.470 --> 00:00:10.230
or attribute of an
element, but that property

00:00:10.230 --> 00:00:11.790
is unknown to Angular.

00:00:11.790 --> 00:00:14.290
It may be unknown for
a variety of reasons.

00:00:14.290 --> 00:00:15.990
If it's an Angular
component, it might

00:00:15.990 --> 00:00:19.210
be missing the input decorator
on the component definition.

00:00:19.210 --> 00:00:21.270
But if it's a
native HTML element,

00:00:21.270 --> 00:00:23.940
it may be a property
that just does not exist.

00:00:23.940 --> 00:00:27.000
Or if you happen to be working
with custom elements or web

00:00:27.000 --> 00:00:29.130
components, there may be
additional configuration

00:00:29.130 --> 00:00:31.720
required to bind to
custom properties.

00:00:31.720 --> 00:00:34.860
Let's start with a quick review
of how property binding works

00:00:34.860 --> 00:00:35.640
in Angular.

00:00:35.640 --> 00:00:38.610
Then we'll examine several
reproductions and resolutions

00:00:38.610 --> 00:00:39.420
for the issue.

00:00:39.420 --> 00:00:41.970
In an Angular template,
we can bind to a property

00:00:41.970 --> 00:00:44.730
by wrapping it in brackets,
then provide an expression

00:00:44.730 --> 00:00:45.820
on the right side.

00:00:45.820 --> 00:00:47.880
When the value in the
expression changes,

00:00:47.880 --> 00:00:51.480
the bound property and UI
will be updated automatically.

00:00:51.480 --> 00:00:54.720
In most cases, you'll run into
issues with unknown properties

00:00:54.720 --> 00:00:57.000
when working with your
own custom components.

00:00:57.000 --> 00:01:00.300
In our code, we have an item
component with a name property.

00:01:00.300 --> 00:01:02.220
Then in the app
component template,

00:01:02.220 --> 00:01:06.090
we reference the app-item
component and attempt to bind

00:01:06.090 --> 00:01:07.530
to the name property.

00:01:07.530 --> 00:01:09.630
But currently,
Angular tells us it

00:01:09.630 --> 00:01:11.670
can't bind to name
since it isn't

00:01:11.670 --> 00:01:13.860
a known property of app-item.

00:01:13.860 --> 00:01:15.780
We can address the
issue by going back

00:01:15.780 --> 00:01:18.330
into our item component
and adding the Input

00:01:18.330 --> 00:01:20.550
decorator to the name property.

00:01:20.550 --> 00:01:24.240
The Input decorator allows
data to be bound or passed

00:01:24.240 --> 00:01:27.400
in from the outside of the
component via the template.

00:01:27.400 --> 00:01:30.780
In other words, if a property
is not specified as an input,

00:01:30.780 --> 00:01:32.580
it can't be used with
brackets for data

00:01:32.580 --> 00:01:34.020
binding in the template.

00:01:34.020 --> 00:01:35.730
It's also worth
noting that you can

00:01:35.730 --> 00:01:37.890
pass an argument to
the Input decorator

00:01:37.890 --> 00:01:40.140
to change the name
of the property.

00:01:40.140 --> 00:01:42.900
That allows you to use a
different name in the template

00:01:42.900 --> 00:01:46.300
than is used as the property
name in the component itself.

00:01:46.300 --> 00:01:48.240
In addition to your
custom components,

00:01:48.240 --> 00:01:51.330
you might also run into
this issue with native HTML

00:01:51.330 --> 00:01:51.840
elements.

00:01:51.840 --> 00:01:53.730
With the default
configuration, you

00:01:53.730 --> 00:01:56.640
can only bind to properties
that the Angular compiler

00:01:56.640 --> 00:01:57.300
knows about.

00:01:57.300 --> 00:01:59.577
When working with
native HTML elements,

00:01:59.577 --> 00:02:01.410
it knows about the
properties and attributes

00:02:01.410 --> 00:02:03.480
from the HTML standard spec.

00:02:03.480 --> 00:02:05.850
For example, here we
have an input element

00:02:05.850 --> 00:02:09.180
and we're binding to the value
attribute on that element.

00:02:09.180 --> 00:02:11.970
At this point, there's no
error, because value is

00:02:11.970 --> 00:02:13.960
a valid attribute on an input.

00:02:13.960 --> 00:02:17.170
But if we attempt to bind to an
attribute that does not exist,

00:02:17.170 --> 00:02:18.750
then Angular will
throw an error.

00:02:18.750 --> 00:02:20.370
There's probably
not a good reason

00:02:20.370 --> 00:02:22.350
to bind to a property
that does not

00:02:22.350 --> 00:02:24.700
exist on a native HTML element.

00:02:24.700 --> 00:02:27.510
However, it is possible
to tell Angular to ignore

00:02:27.510 --> 00:02:29.580
this error within an NgModule.

00:02:29.580 --> 00:02:32.430
Angular core contains
a NO_ERRORS_SCHEMA,

00:02:32.430 --> 00:02:36.180
which we can add to the schemas
array inside an NgModule

00:02:36.180 --> 00:02:37.020
decorator.

00:02:37.020 --> 00:02:40.140
Notice how the error disappears
when we update the schema.

00:02:40.140 --> 00:02:41.910
But keep in mind,
this is generally

00:02:41.910 --> 00:02:44.820
a technique that you should
only use as a last resort

00:02:44.820 --> 00:02:47.040
because it will bypass
the error altogether,

00:02:47.040 --> 00:02:49.860
which may lead to uncaught
issues and unstable code

00:02:49.860 --> 00:02:50.860
in the future.

00:02:50.860 --> 00:02:53.310
Now, one other area you
may encounter this error

00:02:53.310 --> 00:02:56.400
is when working with web
components or custom elements.

00:02:56.400 --> 00:02:58.080
When working with
a custom element,

00:02:58.080 --> 00:03:01.350
it may be perfectly acceptable
to bind to a property

00:03:01.350 --> 00:03:02.880
that Angular does
not know about.

00:03:02.880 --> 00:03:05.550
We can tell Angular to
bypass the error in a more

00:03:05.550 --> 00:03:08.220
conservative way by
applying the custom element

00:03:08.220 --> 00:03:10.320
schema in the NgModule.

00:03:10.320 --> 00:03:13.230
This will tell Angular to
bypass the known property

00:03:13.230 --> 00:03:16.560
error on custom elements like
your own Angular components

00:03:16.560 --> 00:03:18.480
or third party web components.

00:03:18.480 --> 00:03:21.750
That allows you to bind to any
property on a custom element,

00:03:21.750 --> 00:03:23.730
but you'll still get
errors when attempting

00:03:23.730 --> 00:03:26.970
to bind to a non-existent
property on a native HTML

00:03:26.970 --> 00:03:27.720
element.

00:03:27.720 --> 00:03:28.990
Let's go ahead and recap.

00:03:28.990 --> 00:03:31.740
When you encounter "Can't bind
to [? prop ?] name since it

00:03:31.740 --> 00:03:33.420
isn't a known property
of [? node ?],","

00:03:33.420 --> 00:03:36.330
you'll first want to verify
that the prop name is known

00:03:36.330 --> 00:03:39.720
to Angular, while native
HTML elements should only use

00:03:39.720 --> 00:03:42.330
properties based on
the actual HTML spec.

00:03:42.330 --> 00:03:43.920
When working with
custom elements,

00:03:43.920 --> 00:03:46.890
you can bypass the error by
applying the custom element

00:03:46.890 --> 00:03:48.570
schema in an NgModule.

00:03:48.570 --> 00:03:51.600
Or as a last resort, you
can bypass it altogether

00:03:51.600 --> 00:03:53.010
with the NO_ERRORS_SCHEMA.

00:03:53.010 --> 00:03:55.180
For additional
details and examples,

00:03:55.180 --> 00:03:57.870
check out the property binding
guide in the official Angular

00:03:57.870 --> 00:04:00.020
documentation.

